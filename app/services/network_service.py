import ipaddress

from .scanner_service import scan_host, scan_hosts

from ..utils import log
from ..repositories.network_repository import create_network, get_network_by_id, get_all_networks
from ..repositories.host_repository import create_host
from ..models.network import Network


def get_network_data(ip_and_subnet):
    # THIS FUNCTION WAS GENERATED BY CHATGPT
    # Parse the network
    network = ipaddress.ip_network(ip_and_subnet, strict=False)

    # Subnet address
    subnet_address = str(network.network_address)

    # All usable IP addresses in the network (excluding network and broadcast addresses)
    usable_ips = [str(ip) for ip in network.hosts()]

    # If you want *all* IPs (including network and broadcast), use:
    all_ips = [str(ip) for ip in network]
    return usable_ips, subnet_address



def add_network(ip_with_cidr:str):
    ''' Adds a network, will be called from the index when adding a network
    '''
    # Try-Except incase invalid data
    try:
        possible_hosts, subnet_mask = get_network_data(ip_with_cidr)
    except:
        return 'some error has prevented calculating the hosts / subnet'
    
    display_ip:str = ip_with_cidr.split('/')[0]
    network_id:int = create_network(ip=display_ip, subnet_mask=subnet_mask).id
    log(f'Added Network: {display_ip}')
    
    for possible_host in possible_hosts:
        # Single scan needed since not all hosts will reply
        host_online = scan_host(possible_host, 'ping') 
        if host_online:
            log(f'Added host: {possible_host} to network: {display_ip}', '+')
            create_host(ip=possible_host, network_id=network_id)
            
    return 'network has been created'

def scan_network(id, option):
    ''' The active function called when wanting to scan a network
    Expects the values are already santized
    '''
    network_to_scan:Network = get_network_by_id(id)
    results = scan_hosts(hosts=network_to_scan.hosts, option=option)
    
    # format it to give a simple overview
    if option == 'ping':
        return f'There are {len(results)} hosts online'
    else:
        hosts:list[int] = []
        ports:int = 0
        for result in results:
            if result.host_id not in hosts:
                hosts.append(result.host_id)
            ports += 1
            
        return f'found {ports} ports on {len(hosts)} hosts'

def get_all_networks_formatted():
    ''' Returns all Networks in the form of dicts, instead of hosts returns
    the length, in order to distinguish between a single host and networks of
    mutliple hosts
    '''
    networks:list[Network] = get_all_networks()
    # convert the network objects to dicts for ease of use in jinja2
    network_dicts:list[dict] = []
    for network in networks:
        network_dicts.append({'id': network.id, 'ip':network.ip, 
                      'subnet':network.subnet, 'size': len(network.hosts)})
    return network_dicts