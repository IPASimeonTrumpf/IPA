import pytest
import time

from IPA.app import create_app
from IPA.app.extensions import db
from IPA.app.services.network_service import (
    get_all_networks_formatted,
    add_network,
    get_network_data,
    get_network_by_id,
    scan_network,
)
from IPA.app.models.network import Network
from IPA.app.models.port import Port


# Generated by ChatGPT
@pytest.fixture(scope="function")
def test_db():
    """Fixture für die Flask-Testumgebung"""
    flask_app = create_app()
    flask_app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///:memory:"  # In-Memory-DB

    with flask_app.app_context():
        db.create_all()  # Neue Tabellen für jeden Test
        yield flask_app  # Übergibt die Datenbank an den Test
        db.session.remove()
        db.drop_all()


# self written

# NOTE
"""I will only conduct positive tests since the validation is inside
the routes rather than inside the business logic.
"""


def test_get_network_by_id(test_db):
    add_network("127.0.0.1/24")
    network = Network.query.filter(Network.ip == "127.0.0.1").first()

    network_by_id = get_network_by_id(network.id)

    assert network_by_id == network


def test_get_network_data_success(test_db):
    test_hosts, subnet = get_network_data("127.0.0.1/24")
    test_values = []
    for i in range(254):
        test_values.append("127.0.0." + str(i))

    assert len(test_values) == len(test_hosts)
    assert subnet == "255.255.255.0"


def test_add_network_success(test_db):
    message = add_network("127.0.0.1/32")

    network = Network.query.filter(Network.ip == "127.0.0.1").first()
    assert network != None
    assert message == "network has been created"


def test_ping_scan_network_success(test_db):
    message = add_network("127.0.0.1/24")
    assert message == "network has been created"
    network: Network = Network.query.filter(Network.ip == "127.0.0.1").first()

    result = scan_network(network.id, "ping")
    assert result == "254 Hosts are online"


def test_port_scan_network_success(test_db):
    message = add_network("127.0.0.1/30")
    assert message == "network has been created"
    network: Network = Network.query.filter(Network.ip == "127.0.0.1").first()
    result = scan_network(network.id, "22,5000")
    amount_ports = len(Port.query.all())
    assert len(result) == amount_ports


def test_get_all_networks_formatted_success(test_db):
    _ = add_network("127.0.0.1/24")
    message = add_network("10.128.128.1/24")
    assert message == "network has been created"

    networks_as_dicts = get_all_networks_formatted()
    amount_networks = len(Network.query.all())
    assert len(networks_as_dicts) == amount_networks
    assert networks_as_dicts[0]["ip"] == "127.0.0.1"
    assert networks_as_dicts[0]["subnet"] == "255.255.255.0"
    assert networks_as_dicts[0]["size"] > 0
    assert networks_as_dicts[0]["size"] == 254
